#!/usr/bin/env bash

intermediate_file="intermediate.crt"
root_ca_file="root.crt"

set -euo pipefail

[ -z "${DEBUG+x}" ] || { >&2 echo "\"DEBUG\" environment variable set. Enabling debugging output."; set -x; }

die() {
	>&2 echo "FATAL: ${@:-UNKNOWN ERROR}"
	exit 1
}

cleanup() {
	[ -z "${TMPDIR:-}" ] || [ ! -d "${TMPDIR}" ] || rm -rf "${TMPDIR}"
	unset TMPDIR
}

trap cleanup EXIT

TMPDIR=""

[ -n "${1:-}" ] || die "Please put the intended secret name as the first argument to this script. Optionally, specify a namespace as argument 2."

[ -n "${2:-}" ] && namespace="-n ${2}"

keyfile="$(ls *.key *.key.enc 2>/dev/null)" || true
[ -n "${keyfile}" ] || die "No key exists in this directory. Please use the \`makecsr' script to create one."

[ "$(echo "${keyfile}" | wc -w | sed 's/[[:space:]]*//g')" -le "1" ] || die "There is more than one key in this directory. Refusing to continue."

fqdn="$(echo "${keyfile}" | sed 's/\.key\(\.enc\)\{0,1\}$//')"

[ -n "${fqdn}" ] && [ "${fqdn}" != "${keyfile}" ] || die "Could not extract fqdn from keyfile (${keyfile})."

[ -f "${fqdn}.crt" ] || die "There is no certificate name \"${fqdn}.crt\" in this directory."

key="$(openssl pkey -in "${keyfile}")" || die "Key file \"${keyfile}\" is corrupt or damaged, or a bad password was supplied."

openssl x509 -in "${fqdn}.crt" > /dev/null || die "Certificate in \"${fqdn}.crt\" is corrupt or not in PEM format."

[ "$(grep -- "-BEGIN CERTIFICATE-" "${fqdn}.crt" | wc -l | sed 's/[[:space:]]*//g')" == "1" ] || \
	die "There is more than one certificate in \"${fqdn}.crt\". Please put only the leaf certificate in that file."

[ -f "${intermediate_file}" ] || die "No file named \"${intermediate_file}\". Please put the intermediate chain in that file."

[ "$(openssl x509 -in "${fqdn}.crt" -pubkey -noout)" == "$(echo "${key}" | openssl pkey -pubout)" ] || \
	die "Key \"${keyfile}\" does not match the public key in \"${fqdn}.crt\". Fix the key, or get a new certificate."

nis="$(grep -- "-BEGIN CERTIFICATE-" "${intermediate_file}" | wc -l | sed 's/[[:space:]]*//g')"

if [ "${nis}" -ge "1" ]; then
	certsubj="$(openssl x509 -in "${fqdn}.crt" -noout -subject | sed 's/subject=[[:space:]]*//')"
	certissuer="$(openssl x509 -in "${fqdn}.crt" -noout -issuer | sed 's/issuer=[[:space:]]*//')"
	intsubj="$(openssl x509 -in "${intermediate_file}" -noout -subject | sed 's/subject=[[:space:]]*//')"
	[ "${certissuer}" == "${intsubj}" ] || die "Intermediate \"${intsubj}\" did not issue certificate \"${fqdn}.crt\"." \
		"Certificate was issued by \"${certissuer}\"."
fi

intermediates=""
ca=""

if [ -f "${root_ca_file}" ]; then
	[ "$(grep -- "-BEGIN CERTIFICATE-" "${root_ca_file}" | wc -l | sed 's/[[:space:]]*//g')" == "1" ] || die "Not exactly one certificate in \"${root_ca_file}\"."
	openssl x509 -in "${root_ca_file}" > /dev/null || die "Root CA in \"${root_ca_file}\" is corrupt or invalid."
	ca="$(cat "${root_ca_file}")"
	ca_issuer="$(echo "${ca}" | openssl x509 -noout -issuer | sed 's/issuer=[[:space:]]*//')"
	ca_subject="$(echo "${ca}" | openssl x509 -noout -subject | sed 's/subject=[[:space:]]*//')"

	if [ "${ca_subject}" != "${ca_issuer}" ]; then
		die "Root CA specified in \"${root_ca_file}\" is not a root CA. Refusing to continue."
	fi
fi

if [ "${nis}" -gt "1" ]; then
	for i in $(seq 1 "${nis}"); do
		ithcert="$(cat "${intermediate_file}" | awk 'BEGIN{n=0;t='"${i}"'}c{b= b "\n" $0}/----BEGIN CERTIFICATE----/{c=1;b=$0;n++}/---END CERTIFICATE---/&&n==t{print b; b=""}' | openssl x509)" || \
			die "Certificate #$i in \"${intermediate_file}\" is corrupt or invalid."
		
		previssuer="${issuer:-}"
		issuer="$(echo "${ithcert}" | openssl x509 -noout -issuer | sed 's/issuer=[[:space:]]*//')"
		subject="$(echo "${ithcert}" | openssl x509 -noout -subject | sed 's/subject=[[:space:]]*//')"

		[ -z "${intermediates}" ] && intermediates="${ithcert}" || intermediates="$(printf "%s\n%s" "${intermediates}" "${ithcert}")"
	
		[ -n "${previssuer}" ] || continue

		if [ "${previssuer}" != "${subject}" ]; then
			>&2 echo "Intermediate certificate #${i} did not issue certificate in position $((i-1))"
			>&2 echo "Certificate ${i} has subject \"${subject}\", but certificate $((i-1)) was issued by \"${previssuer}\"."
			>&2 echo "See RFC 5246, page 47, \"certificate_list\"."
			die "Aborting."
		fi

		if [ "${i}" == "${nis}" ] && [ "${subject}" != "${issuer}" ] && [ -n "${ca}" ]; then
			if [ "${ca_subject}" != "${issuer}" ]; then
				die "CA specified in \"${root_ca_file}\" did not issue the last certificate in \"${intermediate_file}\". Wrong root, or incomplete intermediate chain."
			fi
		fi

		if [ "${subject}" == "${issuer}" ]; then
			if [ "${i}" == "${nis}" ]; then
				if [ -n "${ca}" ]; then
					die "Root CA exist already read from \"${root_ca_file}\" but also found a root CA in \"${intermediate_file}\". Please fix."
				else
					ca="${ithcert}"
				fi
			else
				die "Self-signed certificate in middle of certificate chain in \"${intermediate_file}\". This is incorrect."
			fi
		fi
	done
fi

kubectl create secret tls "${1}" --key=<(echo "${key}") --cert=<(cat "${fqdn}.crt"; echo "${intermediates}") --dry-run=client ${namespace:-} -o yaml
